



Simple Authentication and Security Layer                     S. Marsiske
Internet-Draft                                                     ctrlc
Intended status: Informational                          4 September 2022
Expires: 8 March 2023


                         OPAQUE SASL Mechanism
                   draft-marsiske-sasl-opaque-latest

Abstract

   This document describes the OPAQUE[OPAQUE] protocol SASL mechanism.
   OPAQUE is a secure asymmetric password-authenticated key exchange
   (aPAKE) that supports mutual authentication in a client-server
   setting without reliance on PKI and with security against pre-
   computation attacks upon server compromise.  This document specifies
   the messages between a SASL server and client using the OPAQUE
   protocol for authentication.

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://stef.github.io/sasl-opaque/draft-marsiske-sasl-opaque.html.
   Status information for this document may be found at
   https://datatracker.ietf.org/doc/draft-marsiske-sasl-opaque/.

   Discussion of this document takes place on the Simple Authentication
   and Security Layer Working Group mailing list (mailto:sasl@ietf.org),
   which is archived at https://mailarchive.ietf.org/arch/
   search/?email_list=sasl.  Subscribe at
   https://www.ietf.org/mailman/listinfo/sasl/.

   Source for this draft and an issue tracker can be found at
   https://github.com/stef/sasl-opaque.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 8 March 2023.

Copyright Notice

   Copyright (c) 2022 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Conventions and Definitions
   2.  Introduction
   3.  Notation
   4.  Protocol overview
     4.1.  Client initiates an OPAQUE protocol execution
     4.2.  Server responds to an OPAQUE credential request
     4.3.  Client recovers credentials authenticates server
     4.4.  Server authenticates client
   5.  Security Considerations
   6.  IANA Considerations
   7.  References
     7.1.  Normative References
     7.2.  Informative References
   Acknowledgments
   Author's Address

1.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

2.  Introduction

   OPAQUE is an efficient, versatile, modern cryptographic primitive
   with strong security guarantees that goes beyond what existing SASL
   mechanisms provide.  One of the most important features is that the
   users password or anything derived from it is never exposed to the
   server.  Another important security property is that replay attacks
   are also not possible.

3.  Notation

   All protocol messages and structures defined in this document use the
   syntax from [RFC8446], Section 3.

4.  Protocol overview

   This specification instantiates OPAQUE-3DH with the following
   configuration tuple ([OPAQUE] configurations section):
   (OPRF(ristretto255, SHA-512), HKDF-SHA-512, HMAC-SHA-512, SHA-512,
   argon2i(67108864, 2), ristretto255).  The sizes of all message
   components are set accordingly.

   The messages closely follow the specification of OPAQUE AKE
   messsages([OPAQUE] AKE messages section).

   SASL OPAQUE is a client initiated mechanism.  In total 3 messages are
   neccessary to authenticate the client to the server.

4.1.  Client initiates an OPAQUE protocol execution

   1.  the client queries the authid, the userid and the password.
       Neither the authid nor the userid can be longer that 64KB in
       size.

   2.  using the password the client calls CreateCredentialRequest()
       this returns

       *  a sensitive context which the client needs to hold onto for
          the next step of the protocol

       *  a credential request.

   3.  the request to be sent to the server is the concatenation of the
       credential request, the userid and authid:

   struct {
       // credential request
       u8 blinded_hashed_to_curve_password[32];
       u8 ephemeral_user_public_key[32];
       u8 user_nonce[32];
       // end of credential request
       u8 userid[]; // utf8 null-terminated
       u8 authid[]; // utf8 null-terminated
   } request;

4.2.  Server responds to an OPAQUE credential request

   1.  the server receives the request from the client.

   2.  based on the authid and userid the server fetches the user record
       from its storage backend

   3.  using the realm or the server FQDN server as the server ID and
       the userid as the user ID the server calls
       CreateCredentialResponse(), which returns a credential response,
       and two sensitive values: the shared key and the user
       authentication code.

   4.  the server concatenates the credential response from OPAQUE and
       the null-terminated utf8 encoded realm and sends this to the
       client.

   response {
     // credential_response
     u8 evaluated_message[32];
     u8 masking_nonce[32];
     u8 longterm_server_public_key[32];
     u8 envelope_nonce[32];
     u8 envelope_auth_tag[64];
     u8 nonceS[32];
     u8 ephemeral_server_public_key[32];
     u8 auth[64];
     // end of credential response
     u8 realm[]; // utf8 null-terminated.
   }

4.3.  Client recovers credentials authenticates server

   1.  The client uses the userid and the realm as the user and the
       server IDs, the sensitive context fromt the first step and calls
       RecoverCredentials().

   2.  RecoverCredentials() returns a shared key and the authentication
       code.

   3.  The client sends the authentication code back to the server.

   client_response {
     u8 auth[64];
   }

4.4.  Server authenticates client

   1.  The Server uses the authentication token calculated during the
       creation of the credential response, and the authentication token
       received from the client and calls UserAuth() with them as
       parameters.  If this succeeds, the server signals successful
       authentication, otherwise it signals authentication failed.

5.  Security Considerations

   TODO Security

6.  IANA Considerations

   This document has no IANA actions.

7.  References

7.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

7.2.  Informative References

   [OPAQUE]   "The OPAQUE Asymmetric PAKE Protocol", n.d.,
              <https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-
              opaque>.

   [RFC8446]  Rescorla, E., "The Transport Layer Security (TLS) Protocol
              Version 1.3", RFC 8446, DOI 10.17487/RFC8446, August 2018,
              <https://www.rfc-editor.org/rfc/rfc8446>.

Acknowledgments

   TODO acknowledge.

Author's Address

   Stefan Marsiske
   ctrlc
   Email: tfxetjor8@ctrlc.hu
